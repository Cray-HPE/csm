@Library('csm-shared-library') _

pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        timeout(time: 240, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '5'))
        timestamps()
    }

    environment {
        RELEASE_NAME = "csm"
        RELEASE_VERSION = sh(returnStdout: true, script: "./version.sh").trim()
        RELEASE_MAJOR_MINOR = sh(returnStdout: true, script: "./version.sh | cut -d '.' -f 1,2").trim()

        // See https://githubmemory.com/repo/jenkinsci/snyk-security-scanner-plugin/issues/107
        SNYK_TOKEN = credentials('SNYK_TOKEN')
    }

    stages {
        stage("Release") {
            when { tag "v*" }

            stages {
                stage('Setup') {
                    steps {
                        script {
                            sh "rm -fr dist"
                            sh """
                                rm -fr env3
                                python3 -m venv env3
                                . env3/bin/activate
                                python3 -m ensurepip --upgrade
                                pip install -U pyyaml
                                if test -x /home/jenkins/tools/io.snyk.jenkins.tools.SnykInstallation/snyk_latest/snyk-linux; then
                                    ln -s /home/jenkins/tools/io.snyk.jenkins.tools.SnykInstallation/snyk_latest/snyk-linux env3/bin/snyk
                                else
                                    curl -L -f https://static.snyk.io/cli/latest/snyk-linux -o env3/bin/snyk && chmod +x env3/bin/snyk
                                fi
                            """
                        }
                    }
                }

                stage('Build') {
                    steps {
                        script {
                            sh """
                                . env3/bin/activate
                                ./release.sh
                            """
                        }
                    }
                }

                stage('Publish') {
                    steps {
                        rtUpload (
                            serverId: 'ARTIFACTORY_ALGOL60',
                            failNoOp: true,
                            spec: """{
                                "files": [
                                    {
                                    "pattern": "dist/*.tar.gz",
                                    "target": "releases/${RELEASE_NAME}/${RELEASE_MAJOR_MINOR}/"
                                    }
                                ]
                            }""",
                        )
                    }
                }
            }
        }
    }
}
