/*
 *
 *  MIT License
 *
 *  (C) Copyright 2022-2024 Hewlett Packard Enterprise Development LP
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 *
 */
@Library('csm-shared-library') _

def isPublishedRelease() {
    return (env.TAG_NAME ==~ /v[0-9]+\.[0-9]+\.[0-9]+(-(alpha|beta|rc)\.[0-9]+)?/)
}

pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        timeout(time: 240, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '5'))
        timestamps()
        disableConcurrentBuilds()
    }

    environment {
        DOCS_CSM_BRANCH = "release/1.5"
        CSM_BASE_VERSION = "1.5.1-rc.3"
        ARTIFACTORY = credentials('artifactory-algol60-readonly')
        PARALLEL_JOBS = "75%"
        SNYK_TOKEN = credentials('SNYK_TOKEN')
        SLACK_CHANNEL_NOTIFY = "${isPublishedRelease() ? "#casm_release_management" : ""}"
        SLACK_CHANNEL_ALERTS = "${isPublishedRelease() ? "#csm-release-alerts" : ""}"
    }

    stages {
        stage('Setup') {
            steps {
                script {
                    env.ARTIFACTORY_USER = env.ARTIFACTORY_USR
                    env.ARTIFACTORY_TOKEN = env.ARTIFACTORY_PSW
                    env.RELEASE_NAME = "csm"
                    env.RELEASE_VERSION = sh(script: './version.sh', returnStdout: true).trim()
                    env.RELEASE = "${env.RELEASE_NAME}-${env.RELEASE_VERSION}"
                    env.RELEASE_MAJOR_MINOR = sh(script: 'echo $RELEASE_VERSION | cut -d . -f 1,2', returnStdout: true).trim()
                    env.RELEASE_BASEURL = "https://artifactory.algol60.net/artifactory/csm-releases/${env.RELEASE_NAME}/${env.RELEASE_MAJOR_MINOR}"
                    env.RELEASE_FILENAME = "${env.RELEASE_NAME}-${env.RELEASE_VERSION}.tar.gz"
                    env.RELEASE_URL = "${env.RELEASE_BASEURL}/${env.RELEASE_FILENAME}"
                    env.SNYK_RESULTS_FILENAME = "${env.RELEASE_NAME}-${env.RELEASE_VERSION}-scans.tar.gz"
                    env.SNYK_RESULTS_URL = "${env.RELEASE_BASEURL}/${env.SNYK_RESULTS_FILENAME}"
                    env.SNYK_RESULTS_SHEET = "${env.RELEASE_NAME}-${env.RELEASE_VERSION}-snyk-results.xlsx"
                    env.SNYK_RESULTS_SHEET_URL = "${env.RELEASE_BASEURL}/${env.SNYK_RESULTS_SHEET}"
                    csmUtils.postSlack(channel: env.SLACK_CHANNEL_NOTIFY, color: "#439fe0", message: "<${env.BUILD_URL}|CSM ${env.RELEASE_VERSION}> - Build starting, see ${env.SLACK_CHANNEL_ALERTS} for details")
                    csmUtils.postSlack(channel: env.SLACK_CHANNEL_ALERTS, color: "#439fe0", message: "<${env.BUILD_URL}|CSM ${env.RELEASE_VERSION}> - Build starting")
                    sh "make pre-flight-check"
                }
            }
        }

        stage('Validate') {
            parallel {
                stage('Assets') {
                    steps {
                        script {
                            csmUtils.postSlack(channel: env.SLACK_CHANNEL_ALERTS, color: "#439fe0", message: "<${env.BUILD_URL}|CSM ${env.RELEASE_VERSION}> - Validation phase started")
                            sh "make validate-assets"
                        }
                    }
                }
                stage("Charts and Images") {
                    steps {
                        sh "make validate-images"
                    }
                }
                stage('RPMs') {
                    steps {
                        sh """
                            make validate-rpms
                            make validate-embedded-repo
                        """
                    }
                }
                stage("API Documentation") {
                    environment {
                        GIT_AUTHOR_NAME = "Jenkins"
                        GIT_AUTHOR_EMAIL = "jenkins@algol60.net"
                        GIT_COMMITTER_NAME = "Jenkins"
                        GIT_COMMITTER_EMAIL = "jenkins@algol60.net"
                        EMAIL = "jenkins@algol60.net"
                    }
                    agent {
                        label "metal-gcp-builder"
                    }
                    steps {
                        script {
                            env.GITHUB_APP_INST_TOKEN = getGitHubToken(appId: "330087", installId: "37198173", credentialsId: "github-jenkins-auto-push-bot-key")
                            sh """
                                ./hack/gen-push-swagger-markdown.sh ${env.DOCS_CSM_BRANCH} ${isPublishedRelease() ? '--push --wait' : ''}
                            """
                        }
                    }
                }
            }
            post {
                always {
                    script {
                        csmUtils.postSlack(channel: env.SLACK_CHANNEL_ALERTS, message: "<${env.BUILD_URL}|CSM ${env.RELEASE_VERSION}> - Validation phase finished")
                    }
                }
            }
        }

        stage('Prepare Release') {
            when { tag "v*" }
            parallel {
                stage('Assets') {
                    steps {
                        script {
                            csmUtils.postSlack(channel: env.SLACK_CHANNEL_ALERTS, color: "#439fe0", message: "<${env.BUILD_URL}|CSM ${env.RELEASE_VERSION}> - Prepare Release phase started")
                            sh "make assets"
                        }
                    }
                }
                stage('RPMs') {
                    steps {
                        sh """
                            make rpms
                            make embedded-repo
                        """
                    }
                }
                stage('Charts and Images') {
                    steps {
                        sh """
                            make charts
                            make images
                        """
                    }
                }
            }
            post {
                always {
                    script {
                        csmUtils.postSlack(channel: env.SLACK_CHANNEL_ALERTS, message: "<${env.BUILD_URL}|CSM ${env.RELEASE_VERSION}> - Prepare Release phase finished")
                    }
                }
            }
        }

        stage('Scan') {
            when { tag "v*" }
            parallel {
                stage('Snyk Scan') {
                    steps {
                        script {
                            csmUtils.postSlack(channel: env.SLACK_CHANNEL_ALERTS, color: "#439fe0", message: "<${env.BUILD_URL}|CSM ${env.RELEASE_VERSION}> - Scan phase started")
                            sh "make snyk"
                        }
                    }
                }
                stage('Pluto Scan') {
                    steps {
                        script {
                            sh "make pluto"
                        }
                    }
                }
            }
            post {
                always {
                    script {
                        csmUtils.postSlack(channel: env.SLACK_CHANNEL_ALERTS, message: "<${env.BUILD_URL}|CSM ${env.RELEASE_VERSION}> - Scan phase finished")
                    }
                }
            }
        }

        stage('Package') {
            when { tag "v*" }
            steps {
                script {
                    csmUtils.postSlack(channel: env.SLACK_CHANNEL_ALERTS, color: "#439fe0", message: "<${env.BUILD_URL}|CSM ${env.RELEASE_VERSION}> - Package phase started")
                    sh "make package"
                }
            }
            post {
                always {
                    script {
                        csmUtils.postSlack(channel: env.SLACK_CHANNEL_ALERTS, message: "<${env.BUILD_URL}|CSM ${env.RELEASE_VERSION}> - Package phase finished")
                    }
                }
            }
        }

        stage('Publish') {
            when { tag "v*" }
            steps {
                script {
                    csmUtils.postSlack(channel: env.SLACK_CHANNEL_ALERTS, color: "#439fe0", message: "<${env.BUILD_URL}|CSM ${env.RELEASE_VERSION}> - Publish phase started")
                    archiveArtifacts(artifacts: 'dist/pluto-report.txt', allowEmptyArchive: true)
                    rtUpload (
                        serverId: 'ARTIFACTORY_ALGOL60',
                        failNoOp: true,
                        spec: """{
                            "files": [
                                {
                                    "pattern": "dist/${env.RELEASE}.tar.gz",
                                    "target": "csm-releases/${env.RELEASE_NAME}/${env.RELEASE_MAJOR_MINOR}/"
                                },
                                {
                                    "pattern": "dist/${env.RELEASE}-scans.tar.gz",
                                    "target": "csm-releases/${env.RELEASE_NAME}/${env.RELEASE_MAJOR_MINOR}/"
                                },
                                {
                                    "pattern": "dist/${env.RELEASE}-test-results.tar.gz",
                                    "target": "csm-releases/${env.RELEASE_NAME}/${env.RELEASE_MAJOR_MINOR}/"
                                },
                                {
                                    "pattern": "dist/${env.RELEASE}-snyk-results.xlsx",
                                    "target": "csm-releases/${env.RELEASE_NAME}/${env.RELEASE_MAJOR_MINOR}/"
                                },
                                {
                                    "pattern": "dist/${env.RELEASE}-images.txt",
                                    "target": "csm-releases/${env.RELEASE_NAME}/${env.RELEASE_MAJOR_MINOR}/"
                                }
                            ]
                        }"""
                    )
                }
            }
            post {
                always {
                    script {
                        csmUtils.postSlack(channel: env.SLACK_CHANNEL_ALERTS, message: "<${env.BUILD_URL}|CSM ${env.RELEASE_VERSION}> - Publish phase finished")
                    }
                }
            }
        }
    }
    post {
        success {
            script {
                csmUtils.postSlack(channel: env.SLACK_CHANNEL_NOTIFY, color: "good", message: """
                <${env.BUILD_URL}|CSM ${env.RELEASE_VERSION}> - :white_check_mark: Success!
                - Release distribution: <${env.RELEASE_URL}|${env.RELEASE_NAME}-${env.RELEASE_VERSION}.tar.gz>
                - Deprecated API usage: <${env.BUILD_URL}/artifact/dist/pluto-report.txt|pluto-report.txt>
                - Snyk results: <${env.SNYK_RESULTS_SHEET_URL}|${env.SNYK_RESULTS_SHEET}> (raw scan results: <${env.SNYK_RESULTS_URL}|${env.SNYK_RESULTS_FILENAME}>)
                """.stripIndent().trim())
                if ( isPublishedRelease() ) {
                    // Fresh install current build on yasha
                    build(job: "Cray-HPE/csm-vshasta-deploy/main", wait: false, parameters: [
                        // Test fresh installs on yasha
                        string(name: "ENVIRONMENT", value: "vex"),
                        // Install version which was just built
                        string(name: "CSM_RELEASE", value: env.RELEASE_VERSION),
                        // Where to report results
                        string(name: "SLACK_REPORT_CHANNEL", value: env.SLACK_CHANNEL_NOTIFY)
                    ])
                    // Upgrade last previous release to current build on vex
                    build(job: "Cray-HPE/csm-vshasta-deploy/main", wait: false, parameters: [
                        // Test upgrades on vex
                        string(name: "ENVIRONMENT", value: "yasha"),
                        // Automatically evaluate last previous release e.g. 1.4.3
                        string(name: "CSM_RELEASE", value: ""),
                        // Upgrade to what had been just built
                        string(name: "CSM_RELEASE_UPGRADE", value: env.RELEASE_VERSION),
                        // Fresh install of 1.4.x requires updated ARTIFACT_VERSION, remove for 1.5 > 1.6 upgrade and onwards
                        string(name: "ARTIFACT_VERSION", value: "4.1.0"),
                        // Upgrade after fresh install
                        booleanParam(name: "UPGRADE", value: true),
                        // Where to report
                        string(name: "SLACK_REPORT_CHANNEL", value: env.SLACK_CHANNEL_NOTIFY)
                    ])
                    build(job: "Cray-HPE/csm-release-internal-upload/main", wait: false, parameters: [
                        string(name: "RELEASE_VERSION", value: "${env.RELEASE_VERSION}"),
                    ])
                }
            }
        }
        failure {
            script {
                csmUtils.postSlack(channel: env.SLACK_CHANNEL_NOTIFY, color: "danger", message: "<${env.BUILD_URL}|CSM ${env.RELEASE_VERSION}> - :x: Build did not complete successfully")
            }
        }
        aborted {
            script {
                csmUtils.postSlack(channel: env.SLACK_CHANNEL_NOTIFY, color: "warning", message: "<${env.BUILD_URL}|CSM ${env.RELEASE_VERSION}> - :warning: Job was aborted")
            }
        }
    }
}
