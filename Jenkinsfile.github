/*
 *
 *  MIT License
 *
 *  (C) Copyright 2022-2023 Hewlett Packard Enterprise Development LP
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included
 *  in all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
 *  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 *  ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 *  OTHER DEALINGS IN THE SOFTWARE.
 *
 */
@Library('csm-shared-library') _
def credentialsId = 'artifactory-algol60'
pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        timeout(time: 240, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '5'))
        timestamps()
        disableConcurrentBuilds()
    }

    environment {
        DOCS_CSM_BRANCH = "main"
        CSM_VSHASTA_DEPLOY_BRANCH = "main"
        CSM_VSHASTA_DEPLOY_ENVIRONMENT = "yasha"
    }

    stages {
        stage('Setup') {
            steps {
                script {
                    sh """
                        command -v parallel >/dev/null 2>&1 || {
                            echo >&2 "error: parallel: command not found"
                            exit 1
                        }
                        make clean
                        rm -fr dist
                        make build/.env
                    """
                    if ( ! jenkinsUtils.findJob("Cray-HPE", "csm-vshasta-deploy", env.CSM_VSHASTA_DEPLOY_BRANCH) ) {
                        error("Branch ${env.CSM_VSHASTA_DEPLOY_BRANCH} in csm-vshasta-deploy repo does not exist")
                    }
                }
            }
        }

        stage('Validate') {
            parallel {
                stage('Assets') {
                    steps {
                        withCredentials([usernamePassword(credentialsId: credentialsId, usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN')]) {
                            sh """
                                ./assets.sh
                            """
                        }
                    }
                }

                stage("Charts and Images") {
                    steps {
                        withCredentials([usernamePassword(credentialsId: credentialsId, usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN')]) {
                            sh """
                                . build/.env/bin/activate && make images -j8
                            """
                        }
                    }
                }

                stage('RPM Index') {
                    steps {
                        withCredentials([usernamePassword(credentialsId: credentialsId, usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN')]) {
                            sh """
                                ./hack/verify-rpm-index.sh \
                                    rpm/cray/csm/sle-15sp2/index.yaml \
                                    rpm/cray/csm/sle-15sp2-compute/index.yaml \
                                    rpm/cray/csm/sle-15sp3/index.yaml \
                                    rpm/cray/csm/sle-15sp3-compute/index.yaml \
                                    rpm/cray/csm/sle-15sp4/index.yaml \
                                    rpm/cray/csm/sle-15sp4-compute/index.yaml
                            """
                        }
                    }
                }

                stage("API Documentation") {
                    environment {
                        GIT_AUTHOR_NAME = "Jenkins"
                        GIT_AUTHOR_EMAIL = "jenkins@algol60.net"
                        GIT_COMMITTER_NAME = "Jenkins"
                        GIT_COMMITTER_EMAIL = "jenkins@algol60.net"
                        EMAIL = "jenkins@algol60.net"
                    }
                    steps {
                        withCredentials(
                            [usernamePassword(credentialsId: credentialsId, usernameVariable: 'ARTIFACTORY_USERNAME', passwordVariable: 'ARTIFACTORY_TOKEN')]
                        ) {
                            script {
                                env.GITHUB_APP_INST_TOKEN = getGitHubToken(appId: "330087", installId: "37198173", credentialsId: "github-jenkins-auto-push-bot-key")
                                sh """
                                    ./hack/gen-push-swagger-markdown.sh ${env.DOCS_CSM_BRANCH} ${env.TAG_NAME ? '--push --wait' : ''}
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('Release') {
            when { tag "v*" }

            environment {
                RELEASE_NAME = "csm"
                SLACK_CHANNEL_NOTIFY = "casm_release_management"
                SLACK_CHANNEL_ALERTS = "csm-release-alerts"
            }

            stages {
                stage('Init') {
                    steps{
                        script {
                            env.RELEASE_VERSION = sh(script: './version.sh', returnStdout: true).trim()
                            slackSend(channel: env.SLACK_CHANNEL_NOTIFY, color: "#439fe0", message: "<${env.BUILD_URL}|CSM ${env.RELEASE_VERSION}> - Build starting, see #${env.SLACK_CHANNEL_ALERTS} for details")
                            slackSend(channel: env.SLACK_CHANNEL_ALERTS, color: "#439fe0", message: "<${env.BUILD_URL}|CSM ${env.RELEASE_VERSION}> - Build starting")
                        }
                    }
                }

                stage('Build') {
                    environment {
                        // See https://githubmemory.com/repo/jenkinsci/snyk-security-scanner-plugin/issues/107
                        SNYK_TOKEN = credentials('SNYK_TOKEN')
                    }
                    steps {
                        script {
                            slackSend(channel: env.SLACK_CHANNEL_ALERTS, message: "<${env.BUILD_URL}|CSM ${env.RELEASE_VERSION}> - Running release.sh")
                            withCredentials([usernamePassword(credentialsId: credentialsId, usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_TOKEN')]) {
                                sh """
                                    . build/.env/bin/activate
                                    ./release.sh
                                """
                            }
                        }
                    }
                    post {
                        success {
                            script {
                                slackSend(channel: env.SLACK_CHANNEL_ALERTS, color: "good", message: "<${env.BUILD_URL}|CSM ${env.RELEASE_VERSION}> - :white_check_mark: Built release distribution")
                            }
                            
                        }
                        unsuccessful {
                            script {
                                slackSend(channel: env.SLACK_CHANNEL_ALERTS, color: "danger", message: "<${env.BUILD_URL}|CSM ${env.RELEASE_VERSION}> - :x: release.sh did not exit successfully")
                            }
                        }
                    }
                }

                stage('Publish') {
                    steps {
                        script {
                            slackSend(channel: env.SLACK_CHANNEL_ALERTS, message: "<${env.BUILD_URL}|CSM ${env.RELEASE_VERSION}> - Publishing distributions")
                            env.RELEASE_MAJOR_MINOR = sh(script: 'echo $RELEASE_VERSION | cut -d . -f 1,2', returnStdout: true).trim()
                        }
                        rtUpload (
                            serverId: 'ARTIFACTORY_ALGOL60',
                            failNoOp: true,
                            spec: """{
                                "files": [
                                    {
                                    "pattern": "dist/*.tar.gz",
                                    "target": "csm-releases/${RELEASE_NAME}/${RELEASE_MAJOR_MINOR}/"
                                    },
                                    {
                                    "pattern": "dist/*-snyk-results.xlsx",
                                    "target": "csm-releases/${RELEASE_NAME}/${RELEASE_MAJOR_MINOR}/"
                                    },
                                    {
                                    "pattern": "dist/*-images.txt",
                                    "target": "csm-releases/${RELEASE_NAME}/${RELEASE_MAJOR_MINOR}/"
                                    }
                                ]
                            }""",
                        )
                    }
                    post {
                        success {
                            script {
                                env.RELEASE_BASEURL = "https://artifactory.algol60.net/artifactory/csm-releases/${env.RELEASE_NAME}/${env.RELEASE_MAJOR_MINOR}"
                                env.RELEASE_FILENAME = "${env.RELEASE_NAME}-${env.RELEASE_VERSION}.tar.gz"
                                env.RELEASE_URL = "${env.RELEASE_BASEURL}/${env.RELEASE_FILENAME}"
                                slackSend(channel: env.SLACK_CHANNEL_ALERTS, color: "good", message: "<${env.BUILD_URL}|CSM ${env.RELEASE_VERSION}> - :white_check_mark: Release distribution at ${env.RELEASE_URL}")
                            }
                        }
                        unsuccessful {
                            script {
                                slackSend(channel: env.SLACK_CHANNEL_ALERTS, color: "danger", message: "<${env.BUILD_URL}|CSM ${env.RELEASE_VERSION}> - :x: Publishing distributions was not successful")
                            }
                        }
                    }
                }
            }
            post {
                success {
                    script {
                        env.SNYK_RESULTS_FILENAME = "${env.RELEASE_NAME}-${env.RELEASE_VERSION}-scans.tar.gz"
                        env.SNYK_RESULTS_URL = "${env.RELEASE_BASEURL}/${env.SNYK_RESULTS_FILENAME}"
                        env.SNYK_RESULTS_SHEET = "${env.RELEASE_NAME}-${env.RELEASE_VERSION}-snyk-results.xlsx"
                        env.SNYK_RESULTS_SHEET_URL = "${env.RELEASE_BASEURL}/${env.SNYK_RESULTS_SHEET}"
                        slackSend(channel: env.SLACK_CHANNEL_NOTIFY, color: "good", message: "<${env.BUILD_URL}|CSM ${env.RELEASE_VERSION}> - :white_check_mark: Success!\n- Release distribution: <${env.RELEASE_URL}|${env.RELEASE_NAME}-${env.RELEASE_VERSION}.tar.gz>\n- Snyk results: <${env.SNYK_RESULTS_SHEET_URL}|${env.SNYK_RESULTS_SHEET}> (raw scan results: <${env.SNYK_RESULTS_URL}|${env.SNYK_RESULTS_FILENAME}>)")
                        build(job: jenkinsUtils.findJobName("Cray-HPE", "csm-vshasta-deploy", env.CSM_VSHASTA_DEPLOY_BRANCH), wait: false, parameters: [
                            string(name: "CSM_RELEASE", value: env.RELEASE_VERSION),
                            string(name: "ENVIRONMENT", value: env.CSM_VSHASTA_DEPLOY_ENVIRONMENT)
                        ])
                        build(job: "Cray-HPE/csm-release-internal-upload/main", wait: false, parameters: [
                            string(name: "RELEASE_NAME", value: "${env.RELEASE_NAME}"),
                            string(name: "RELEASE_MAJOR_MINOR", value: "${env.RELEASE_MAJOR_MINOR}"),
                            string(name: "RELEASE_VERSION", value: "${env.RELEASE_VERSION}"),
                            string(name: "POSTUPLOAD_REPORT", value: "always")
                        ])
                    }
                }
                failure {
                    script {
                        slackSend(channel: env.SLACK_CHANNEL_NOTIFY, color: "danger", message: "<${env.BUILD_URL}|CSM ${env.RELEASE_VERSION}> - :x: Build did not complete successfully")
                    }
                }
                aborted {
                    script {
                        slackSend(channel: env.SLACK_CHANNEL_ALERTS, color: "warning", message: "<${env.BUILD_URL}|CSM ${env.RELEASE_VERSION}> - :warning: Job was aborted")
                        slackSend(channel: env.SLACK_CHANNEL_NOTIFY, color: "warning", message: "<${env.BUILD_URL}|CSM ${env.RELEASE_VERSION}> - :warning: Job was aborted")
                    }
                }
            }
        }
    }
}
