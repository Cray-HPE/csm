#!/bin/bash
# Copyright 2014-2021 Hewlett Packard Enterprise Development LP

set -euo pipefail

function error_exit()
{
  echo "ERROR: $1"
  exit 1
}

ARGS=${1}
YQ=${2}
TEMP_DIR=${3}
OUT_FILE=${4}

# EXPECTED ARGS:
#
#  key - PEM-formatted private key for intermediate/subordinate CA
#  cert - PEM-formatted certificate for intermediate/subordinate CA
#  ca_bundle - PEM-formatted CA bundle 
#    - MUST contain certificates to validate the focal CA injected
#    - CAN contain unrelated CA certificates that should be trusted

KEY="$(echo $ARGS | $YQ r - 'key')"
CERT="$(echo $ARGS | $YQ r - 'cert')"
CA_BUNDLE="$(echo $ARGS | $YQ r - 'ca_bundle')"

# Write the cert and ca_bundle to temp space for further verification
echo "$CERT" > "${TEMP_DIR}/cert.crt"
echo "$CA_BUNDLE" > "${TEMP_DIR}/ca_bundle.crt"

# write out valid cert purposes
openssl x509 -in "${TEMP_DIR}/cert.crt" -purpose -noout > "${TEMP_DIR}/cert_purposes.out"

# Verify that the certificate contains a CA with minimal attributes
grep -q -i "ssl client ca : yes" "${TEMP_DIR}/cert_purposes.out" || error_exit "The CA must support web client authentication (not a CA?)."
grep -q -i "ssl server ca : yes" "${TEMP_DIR}/cert_purposes.out" || error_exit "The CA must support web server authentication (not a CA?)."
grep -q -i "crl signing ca : yes" "${TEMP_DIR}/cert_purposes.out" || error_exit "The CA must support CRL signing (not a CA?)."

# Verify that the certificate is not self-signed (not a root)
if openssl verify \
       -CAfile "${TEMP_DIR}/cert.crt" \
       "${TEMP_DIR}/cert.crt" &> /dev/null
then
   error_exit "The cert appears to be a root CA. Root CAs are not supported."
fi

# Verify that it appears the key and cert belong together
CERT_PUBH="$(openssl x509 -in "${TEMP_DIR}/cert.crt" -pubkey -noout | openssl sha256)"
PRIV_PUBH="$(echo "$KEY" | openssl pkey -pubout | openssl sha256)"

if [ "$CERT_PUBH" != "$PRIV_PUBH" ]
then
   error_exit "The cert does not appear to match the key."
fi

# Verify that the CA can be verified given the trust bundle
if ! openssl verify \
        -CAfile "${TEMP_DIR}/ca_bundle.crt" \
        -untrusted "${TEMP_DIR}/ca_bundle.crt" \
        "${TEMP_DIR}/cert.crt" &> /dev/null
then
   error_exit "Couldn't validate CA given trust bundle"
fi

# Write the generator result
MANIFEST_FILE="${TEMP_DIR}/static_platform_ca.yaml"
touch "$MANIFEST_FILE"

$YQ w -i "$MANIFEST_FILE" "data[int_ca.key]" "$(printf "%s\n" "$KEY" | base64)"
$YQ w -i "$MANIFEST_FILE" "data[int_ca.crt]" "$(printf "%s\n" "$CERT" | base64)"
$YQ w -i "$MANIFEST_FILE" "data[ca_bundle.crt]" "$(printf "%s\n" "$CA_BUNDLE" | base64)"

$YQ r "$MANIFEST_FILE" > $OUT_FILE
