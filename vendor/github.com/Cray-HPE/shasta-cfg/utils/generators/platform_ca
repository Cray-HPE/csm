#!/bin/bash
#
# MIT License
#
# (C) Copyright 2023 Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.
#
set -euo pipefail

ARGS=${1}
YQ=${2}
TEMP_DIR=${3}
OUT_FILE=${4}

# EXPECTED ARGS:
# root_days - name of public cert field
# int_days - name of private key field
# root_cn - common name for root CA
# int_cn - common name for intermediate CA

ROOT_DAYS="$(echo $ARGS | $YQ r - 'root_days')"
INT_DAYS="$(echo $ARGS | $YQ r - 'int_days')"
ROOT_CN="$(echo $ARGS | $YQ r - 'root_cn')"
INT_CN="$(echo $ARGS | $YQ r - 'int_cn')"

# create openssl.cnf
# note that policy is minimal as it is anticipated
# the CA and intermediate/subordinate created
# here will be used inside other policy engines (e.g., vault)

OPENSSL_CONFIG="openssl.cnf"
cat << EOF >${TEMP_DIR}/$OPENSSL_CONFIG
[ca]
default_ca = CA_default

[ CA_default ]
dir = .                               # Where everything is kept
certs           = \$dir/ca.db.certs   # Where the issued certs are kept
crl_dir         = \$dir/ca.db.crls    # Where the issued crl are kept
database        = \$dir/ca.db.index   # database index file.
new_certs_dir   = \$dir/ca.db.certs   # default place for new certs.

certificate     = \$dir/root_ca.crt   # The CA certificate
private_key     = \$dir/root_ca.key   # The private key
serial          = \$dir/ca.db.serial  # The current serial number
crlnumber       = \$dir/crl.db.number # the current crl number
policy          = policy_match

[policy_match]
organizationName = match
organizationalUnitName = match
commonName = supplied

[req]
distinguished_name = req_distinguished_name

[req_distinguished_name]

[v3_root_ca]
basicConstraints = critical, CA:true
keyUsage = critical, cRLSign, keyCertSign
subjectKeyIdentifier = hash

[v3_intermediate_ca]
basicConstraints = critical, CA:true
keyUsage = critical, cRLSign, keyCertSign
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
EOF

KEYSPEC="rsa:3072"
MDSPEC="sha256"

# Add a UUID to the root and int CN
# as an aide to quickly distingiush and
# associate them
UUID="$(uuidgen)"

# setup directory structure for one-shot CA
# and stub the index file
mkdir ${TEMP_DIR}/{ca.db.certs,ca.db.crls}
touch ${TEMP_DIR}/ca.db.index

# create root and intermediate CAs
cd $TEMP_DIR

# Generate root CA material
openssl req \
        -batch \
        -x509 \
        -newkey "$KEYSPEC" \
        -nodes \
        -keyout root_ca.key \
        -extensions v3_root_ca \
        -config "$OPENSSL_CONFIG" \
        -out root_ca.crt \
        -"${MDSPEC}" \
        -days $ROOT_DAYS \
        -subj "/O=Shasta/OU=Platform/CN=${ROOT_CN} ($UUID)" &>/dev/null

# Generate CSR for intermediate
openssl req \
        -batch \
        -newkey "$KEYSPEC" \
        -nodes \
        -keyout int_ca.key \
        -extensions v3_intermediate_ca \
        -config "$OPENSSL_CONFIG" \
        -"${MDSPEC}" \
        -days $INT_DAYS \
        -out int_ca.csr \
        -subj "/O=Shasta/OU=Platform/CN=${INT_CN} ($UUID)"  &>/dev/null

# Sign the intermediate CSR with CA
openssl ca \
        -batch \
        -config "$OPENSSL_CONFIG" \
        -create_serial \
        -extensions v3_intermediate_ca \
        -md "$MDSPEC" \
        -in int_ca.csr \
        -out int_ca.crt \
        -noemailDN \
        -days $INT_DAYS  &>/dev/null

# Mangle the intermediate CA cert to get just the PEM format
awk '/BEGIN CERTIFICATE/,/END CERTIFICATE/' int_ca.crt > int_ca.crt.new
mv int_ca.crt.new int_ca.crt

# Verify the intermediate against the root
openssl verify -CAfile root_ca.crt int_ca.crt &>/dev/null

# create a trust bundle (root and int concatenated)
cat root_ca.crt int_ca.crt > ca_bundle.crt

# Prepare and write output
MANIFEST_FILE="${TEMP_DIR}/platform_ca.yaml"
touch "$MANIFEST_FILE"

$YQ w -i "$MANIFEST_FILE" "data[root_ca.key]" "$(cat "${TEMP_DIR}/root_ca.key" | base64)"
$YQ w -i "$MANIFEST_FILE" "data[int_ca.key]" "$(cat "${TEMP_DIR}/int_ca.key" | base64)"
$YQ w -i "$MANIFEST_FILE" "data[root_ca.crt]" "$(cat "${TEMP_DIR}/root_ca.crt" | base64)"
$YQ w -i "$MANIFEST_FILE" "data[int_ca.crt]" "$(cat "${TEMP_DIR}/int_ca.crt" | base64)"
$YQ w -i "$MANIFEST_FILE" "data[ca_bundle.crt]" "$(cat "${TEMP_DIR}/ca_bundle.crt" | base64)"

$YQ r "$MANIFEST_FILE" > $OUT_FILE