@Library('csm-shared-library') _

pipeline {
    agent {
        label "metal-gcp-builder"
    }

    triggers {
        cron('@daily')
    }

    options {
        timeout(time: 240, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '5'))
        timestamps()
        disableConcurrentBuilds()
    }

    stages {
        stage('Setup') {
            steps {
                script {
                    sh """
                        command -v parallel >/dev/null 2>&1 || {
                            echo >&2 "error: parallel: command not found"
                            exit 1
                        }
                        make build/.env
                    """
                }
            }
        }

        stage('Inspect') {
            steps {
                sh """
                    . build/.env/bin/activate
                    make images -j8
                """
            }
        }

        stage('Scan') {
            environment {
                // See https://githubmemory.com/repo/jenkinsci/snyk-security-scanner-plugin/issues/107
                SNYK_TOKEN = credentials('SNYK_TOKEN')
                NORMALIZED_BRANCH_NAME = BRANCH_NAME.replaceAll(/[^a-zA-Z0-9_\.]/, "-")
                DISTNAME = "snyk-csm-${env.NORMALIZED_BRANCH_NAME}-${GIT_REVISION,length=7}"
            }
            steps {
                script {
                    sh "mkdir -p 'dist/${env.DISTNAME}'"
                    sh """
                        . build/.env/bin/activate
                        parallel -j 75% --halt-on-error now,fail=1 -v \
                            -a build/images/index.txt --colsep '\t' \
                            hack/snyk-scan.sh 'dist/${env.DISTNAME}' '{2}' '{1}'
                        hack/snyk-to-html.sh 'dist/${env.DISTNAME}'
                    """
                    sh "hack/snyk-aggregate-results.sh 'dist/${env.DISTNAME}' --sheet-name '${env.DISTNAME.minus('snyk-')}'"
                    sh """
                        cp build/images/index.txt 'dist/${env.DISTNAME}/index.txt'
                        mv 'dist/${env.DISTNAME}/snyk-results.xslx' 'dist/${env.DISTNAME}.xslx'
                        tar --owner=0 --group=0 -cvzf 'dist/${env.DISTNAME}.tar.gz' -C dist '${env.DISTNAME}/' --remove-files
                    """
                }
            }
            post {
                success {
                    archiveArtifacts artifacts: "dist/${env.DISTNAME}.tar.gz, dist/${env.DISTNAME}.xslx", allowEmptyArchive: false
                }
            }
        }
    }
}
